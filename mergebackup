#include "sort.h"
void prints_left_right(int *arr, char *side, size_t start, size_t end)
{
        size_t i;

	printf("[%s]: ", side);
	for (i = start; i < end; i++)
	{
		if (i != (end - 1))
			printf("%d, ", arr[i]);
		else
			printf("%d\n", arr[i]);
	}

}
void merge(int *array, int *sortArr, size_t l, size_t r)
{
	size_t i, l_half, r_half;

	if (r - l <= 1)
		return;

	size_t mid = (l + r) / 2;
	merge(array, sortArr, l, mid);
	merge(array, sortArr, mid, r);
	printf("Merging...\n");
	prints_left_right(array, "left", l, mid);
//	printf("[left]: ");
//	for (i = l; i < mid; i++)
//	{
//		if (i != (mid - 1))
//			printf("%d, ", array[i]);
//		else
//			printf("%d\n", array[i]);
//	}
	printf("[right]: ");
	for (i = mid; i < r; i++)
	{
		if (i != (r - 1))
			printf("%d, ", array[i]);
		else
			printf("%d\n", array[i]);
	}
	l_half = l; r_half = mid;
	for (i = l; i < r; i++)
	{
		if ((l_half < mid) && ((array[l_half] < array[r_half]) || r_half == r))
		{
			sortArr[i] = array[l_half]; l_half++;
		}
		else
		{
			sortArr[i] = array[r_half]; r_half++;
		}
	}
	printf("[Done]: ");
	for (i = l; i < r; i++)
	{
		if (i != (r - 1))
			printf("%d, ", sortArr[i]);
		else
			printf("%d\n", sortArr[i]);
	}
	for (i = l; i < r; i++)
	{
		array[i] = sortArr[i];
	}
}
/**
 * merge_sort - sorts mergly
 * @array: array sort
 * @size: size of array
 */
void merge_sort(int *array, size_t size)
{
	int *sortArr;

	if(!(array) || size < 2)
		return;
	sortArr = malloc(sizeof(int) * size);
	if(!(sortArr))
		return;
	merge(array, sortArr, 0, size);
}
